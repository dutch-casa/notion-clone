/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrganizationsIndexRouteImport } from './routes/organizations/index'
import { Route as OrganizationsOrgIdRouteImport } from './routes/organizations/$orgId'
import { Route as OrganizationsOrgIdPagesPageIdRouteImport } from './routes/organizations/$orgId/pages/$pageId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsIndexRoute = OrganizationsIndexRouteImport.update({
  id: '/organizations/',
  path: '/organizations/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsOrgIdRoute = OrganizationsOrgIdRouteImport.update({
  id: '/organizations/$orgId',
  path: '/organizations/$orgId',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsOrgIdPagesPageIdRoute =
  OrganizationsOrgIdPagesPageIdRouteImport.update({
    id: '/pages/$pageId',
    path: '/pages/$pageId',
    getParentRoute: () => OrganizationsOrgIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteWithChildren
  '/organizations': typeof OrganizationsIndexRoute
  '/organizations/$orgId/pages/$pageId': typeof OrganizationsOrgIdPagesPageIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteWithChildren
  '/organizations': typeof OrganizationsIndexRoute
  '/organizations/$orgId/pages/$pageId': typeof OrganizationsOrgIdPagesPageIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteWithChildren
  '/organizations/': typeof OrganizationsIndexRoute
  '/organizations/$orgId/pages/$pageId': typeof OrganizationsOrgIdPagesPageIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/organizations/$orgId'
    | '/organizations'
    | '/organizations/$orgId/pages/$pageId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/organizations/$orgId'
    | '/organizations'
    | '/organizations/$orgId/pages/$pageId'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/organizations/$orgId'
    | '/organizations/'
    | '/organizations/$orgId/pages/$pageId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  OrganizationsOrgIdRoute: typeof OrganizationsOrgIdRouteWithChildren
  OrganizationsIndexRoute: typeof OrganizationsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/': {
      id: '/organizations/'
      path: '/organizations'
      fullPath: '/organizations'
      preLoaderRoute: typeof OrganizationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/$orgId': {
      id: '/organizations/$orgId'
      path: '/organizations/$orgId'
      fullPath: '/organizations/$orgId'
      preLoaderRoute: typeof OrganizationsOrgIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organizations/$orgId/pages/$pageId': {
      id: '/organizations/$orgId/pages/$pageId'
      path: '/pages/$pageId'
      fullPath: '/organizations/$orgId/pages/$pageId'
      preLoaderRoute: typeof OrganizationsOrgIdPagesPageIdRouteImport
      parentRoute: typeof OrganizationsOrgIdRoute
    }
  }
}

interface OrganizationsOrgIdRouteChildren {
  OrganizationsOrgIdPagesPageIdRoute: typeof OrganizationsOrgIdPagesPageIdRoute
}

const OrganizationsOrgIdRouteChildren: OrganizationsOrgIdRouteChildren = {
  OrganizationsOrgIdPagesPageIdRoute: OrganizationsOrgIdPagesPageIdRoute,
}

const OrganizationsOrgIdRouteWithChildren =
  OrganizationsOrgIdRoute._addFileChildren(OrganizationsOrgIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  OrganizationsOrgIdRoute: OrganizationsOrgIdRouteWithChildren,
  OrganizationsIndexRoute: OrganizationsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
