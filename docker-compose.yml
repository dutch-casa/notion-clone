version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: notionclone-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-notionclone}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notionclone-network

  redis:
    image: redis:7-alpine
    container_name: notionclone-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notionclone-network

  minio:
    image: minio/minio:latest
    container_name: notionclone-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - notionclone-network

  # MinIO bucket creation
  minio-init:
    image: minio/mc:latest
    container_name: notionclone-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      mc mb minio/${MINIO_BUCKET_NAME:-notionclone-uploads} --ignore-existing;
      mc anonymous set download minio/${MINIO_BUCKET_NAME:-notionclone-uploads};
      exit 0;
      "
    restart: "no"
    networks:
      - notionclone-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: notionclone-backend
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://0.0.0.0:8081
      ConnectionStrings__DefaultConnection: Host=postgres;Database=${POSTGRES_DB:-notionclone};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}
      ConnectionStrings__Redis: redis:6379
      MinIO__Endpoint: minio:9000
      MinIO__AccessKey: ${MINIO_ROOT_USER:-minioadmin}
      MinIO__SecretKey: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MinIO__BucketName: ${MINIO_BUCKET_NAME:-notionclone-uploads}
      MinIO__UseSSL: "false"
      Jwt__SecretKey: ${JWT_SECRET_KEY}
      Jwt__Issuer: ${JWT_ISSUER:-NotionClone}
      Jwt__Audience: ${JWT_AUDIENCE:-NotionCloneUsers}
      Jwt__ExpiryMinutes: ${JWT_EXPIRY_MINUTES:-60}
      Cors__AllowedOrigins__0: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "${BACKEND_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    networks:
      - notionclone-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: notionclone-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - notionclone-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  notionclone-network:
    driver: bridge
